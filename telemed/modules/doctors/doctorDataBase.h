#ifndef DOCTOR_DB_H_
#define DOCTOR_DB_H_

#include <stdio.h>
#include <string.h>
#include "../libs/cJSON/cJSON.h"

// Перечисление возможных специальностей
typedef enum
{
    DEFAULT_SPEC,                 // Дефолт
    THERAPIST,                    // Терапевт
    PEDIATRICIAN,                 // Педиатр
    SURGEON,                      // Хирург
    CARDIOLOGIST,                 // Кардиолог
    NEUROLOGIST,                  // Невролог
    GASTROENTEROLOGIST,           // Гастроэнтеролог
    DERMATOLOGIST,                // Дерматолог
    UROLOGIST,                    // Уролог
    ONCOLOGIST,                   // Онколог
    OPHTHALMOLOGIST,              // Офтальмолог
    PHYSIOTHERAPIST,              // Физиотерапевт
    REHABILITATION_DOCTOR,        // Реабилитолог
    SPORTS_MEDICINE,              // Спортивный-врач
    GYNECOLOGIST,                 // Гинеколог
    PSYCHIATRIST,                 // Психиатр
    DENTIST,                      // Стоматолог общей практики
    ALLERGIST,                    // Аллерголог

    OTHER                        // Прочее
} SPECIALITY;

#if 1
const char* const SPECIALTY_NAMES[] =
{
    u8"Терапевт",
    u8"Педиатр",
    u8"Хирург",
    u8"Кардиолог",
#if 0
    u8"Невролог",
    u8"Гастроэнтеролог",
    u8"Дерматолог",
    u8"Уролог",
    u8"Онколог",
    u8"Офтальмолог",
    u8"Физиотерапевт",
    u8"Реабилитолог",
    u8"Спортивный-врач",
    u8"Гинеколог",
    u8"Психиатр",
    u8"Стоматолог общей практики",
    u8"Аллерголог",
#endif
    u8"Прочее"
};
#endif

/***************************************************************************//**
 * @struct PatientData
 * @brief Структура для хранения данных пациента
 *
 * Эта структура содержит все необходимые данные о пациенте:
 * - личные данные (имя, фамилия, отчество)
 * - возраст
 * - пол
 *******************************************************************************/
typedef struct {
    int id;                     /**< Уникальный идентификатор врача */

    SPECIALITY specialty;       /**< Медицинская специализация */

    char* firstName;             /**< Имя врача */

    char* lastName;             /**< Фамилия врача */

    char* middleName;           /**< Отчество врача */

    int experience;             /**< Стаж работы в годах */

    char* photo_path;           /**< Путь к фотографии */

    int rating;                 /**< Рейтинг врача (от 0 до 5) */

} Doctor;

/***************************************************************************//**
 * @brief Создает новый экземпляр PatientData
 *
 * @param firstName Имя пациента
 * @param lastName Фамилия пациента
 * @param middleName Отчество пациента
 * @param age Возраст пациента
 * @param gender Пол пациента
 *
 * @return Указатель на созданную структуру PatientData или NULL в случае ошибки
 *******************************************************************************/
Doctor* createDoctor(int id, SPECIALITY specialty, const char* firstName, const char* lastName,
    const char* middleName, float experience, const char* photo_path, float rating);

/***************************************************************************//**
 * @brief Освобождает память, выделенную для PatientData
 *
 * @param patient Указатель на структуру PatientData для освобождения
 *******************************************************************************/
void freeDoctor(Doctor* doctor);

/***************************************************************************//**
 * @brief Преобразует структуру PatientData в JSON объект
 *
 * @param patient Указатель на структуру PatientData для преобразования
 *
 * @return Указатель на созданный JSON объект или NULL в случае ошибки
 *******************************************************************************/
cJSON* doctorToJson(Doctor* doctor);

/***************************************************************************//**
 * @brief Создает структуру PatientData из JSON объекта
 *
 * @param json Указатель на JSON объект для преобразования
 *
 * @return Указатель на созданную структуру PatientData или NULL в случае ошибки
 *******************************************************************************/
Doctor* jsonToDoctor(cJSON* json);

/***************************************************************************//**
 * @brief Сохраняет базу данных пациентов в JSON файл
 *
 * @param filename Имя файла для сохранения
 * @param patients Указатель на JSON массив с данными пациентов
 *
 * @return 1 при успешном сохранении, 0 в случае ошибки
 *******************************************************************************/
int saveDoctor(const char* filename, cJSON* doctor);

/***************************************************************************//**
 * @brief Загружает базу данных пациентов из JSON файла
 *
 * @param filename Имя файла для загрузки
 *
 * @return Указатель на загруженный JSON объект или NULL в случае ошибки
 *******************************************************************************/
cJSON* loadDoctor(const char* filename);

#endif // DOCTOR_DB_H_