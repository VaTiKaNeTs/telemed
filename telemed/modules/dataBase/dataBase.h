#ifndef PATIENT_DB_H_
#define PATIENT_DB_H_

#include <stdio.h>
#include <string.h>
#include "../../libs/cJSON/cJSON.h"

/***************************************************************************//**
 * @struct PatientData
 * @brief Структура для хранения данных пациента
 *
 * Эта структура содержит все необходимые данные о пациенте:
 * - личные данные (имя, фамилия, отчество)
 * - возраст
 * - пол
 *******************************************************************************/
typedef struct 
{
    int id;
    double chatId;    
    char* firstName;    /**< Имя пациента */
    char* lastName;     /**< Фамилия пациента */
    char* middleName;   /**< Отчество пациента */
    int age;            /**< Возраст пациента */
    char* gender;       /**< Пол пациента (мужской/женский) */

} PatientData;

/***************************************************************************//**
 * @brief Создает новый экземпляр PatientData
 *
 * @param firstName Имя пациента
 * @param lastName Фамилия пациента
 * @param middleName Отчество пациента
 * @param age Возраст пациента
 * @param gender Пол пациента
 *
 * @return Указатель на созданную структуру PatientData или NULL в случае ошибки
 *******************************************************************************/
PatientData* createPatientData(int id, long chatId, const char* firstName, const char* lastName,
    const char* middleName, int age, const char* gender);

/***************************************************************************//**
 * @brief Освобождает память, выделенную для PatientData
 *
 * @param patient Указатель на структуру PatientData для освобождения
 *******************************************************************************/
void freePatientData(PatientData* patient);

/***************************************************************************//**
 * @brief Преобразует структуру PatientData в JSON объект
 *
 * @param patient Указатель на структуру PatientData для преобразования
 *
 * @return Указатель на созданный JSON объект или NULL в случае ошибки
 *******************************************************************************/
cJSON* patientToJson(PatientData* patient);

/***************************************************************************//**
 * @brief Создает структуру PatientData из JSON объекта
 *
 * @param json Указатель на JSON объект для преобразования
 *
 * @return Указатель на созданную структуру PatientData или NULL в случае ошибки
 *******************************************************************************/
PatientData* jsonToPatient(cJSON* json);

/***************************************************************************//**
 * @brief Сохраняет базу данных пациентов в JSON файл
 *
 * @param filename Имя файла для сохранения
 * @param patients Указатель на JSON массив с данными пациентов
 *
 * @return 1 при успешном сохранении, 0 в случае ошибки
 *******************************************************************************/
int savePatientDatabase(const char* filename, cJSON* patients);

/***************************************************************************//**
 * @brief Загружает базу данных пациентов из JSON файла
 *
 * @param filename Имя файла для загрузки
 *
 * @return Указатель на загруженный JSON объект или NULL в случае ошибки
 *******************************************************************************/
cJSON* loadPatientDatabase(const char* filename);

#endif // PATIENT_DB_H_